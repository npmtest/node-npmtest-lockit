{"/home/travis/build/npmtest/node-npmtest-lockit/test.js":"/* istanbul instrument in package npmtest_lockit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lockit/lib.npmtest_lockit.js":"/* istanbul instrument in package npmtest_lockit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lockit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lockit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lockit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lockit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lockit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lockit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lockit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lockit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lockit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lockit.__dirname + '/lib.npmtest_lockit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lockit/node_modules/lockit/index.js":"'use strict';\n\nvar path = require('path');\nvar events = require('events');\nvar util = require('util');\nvar express = require('express');\nvar chalk = require('chalk');\nvar extend = require('node.extend');\nvar Signup = require('lockit-signup');\nvar Login = require('lockit-login');\nvar ForgotPassword = require('lockit-forgot-password');\nvar DeleteAccount = require('lockit-delete-account');\nvar utils = require('lockit-utils');\nvar configDefault = require('./config.default.js');\n\n\n\n/**\n * Lockit constructor function.\n *\n * @constructor\n * @param {Object} config\n */\nvar Lockit = module.exports = function(config) {\n\n  if (!(this instanceof Lockit)) {return new Lockit(config); }\n\n  this.config = config || {};\n  var that = this;\n\n  if (!this.config.db) {this.database(); }\n  if (!this.config.emailType || !this.config.emailSettings) {this.email(); }\n\n  // use default values for all values that aren't provided\n  this.config = extend(true, {}, configDefault, this.config);\n\n  // create db adapter only once and pass it to modules\n  var db = utils.getDatabase(this.config);\n  this.adapter = this.config.db.adapter || require(db.adapter)(this.config);\n\n  // load all required modules\n  var signup = new Signup(this.config, this.adapter);\n  var login = new Login(this.config, this.adapter);\n  var deleteAccount = new DeleteAccount(this.config, this.adapter);\n  var forgotPassword = new ForgotPassword(this.config, this.adapter);\n\n  // router\n  this.router = new express.Router();\n\n  // send all GET requests for lockit routes to '/index.html'\n  if (this.config.rest) {this.rest(); }\n\n  // expose name and email to template engine\n  this.router.use(function(req, res, next) {\n    res.locals.name = req.session.name || '';\n    res.locals.email = req.session.email || '';\n    next();\n  });\n\n  // add submodule routes\n  this.router.use(signup.router);\n  this.router.use(login.router);\n  this.router.use(deleteAccount.router);\n  this.router.use(forgotPassword.router);\n\n  // pipe events to lockit\n  var emitters = [signup, login, deleteAccount, forgotPassword];\n  utils.pipe(emitters, that);\n\n  // special event for quick start\n  signup.on('signup::post', function(user) {\n    if (that.config.db.url === 'sqlite://' && that.config.db.name === ':memory:') {\n      var message = 'http://localhost:3000/signup/' + user.signupToken;\n      console.log(\n        chalk.bgBlack.green('lockit'),\n        chalk.bgBlack.yellow(message),\n        'cmd + double click on os x'\n      );\n    }\n    that.emit('signup::post', user);\n  });\n\n  events.EventEmitter.call(this);\n\n};\n\nutil.inherits(Lockit, events.EventEmitter);\n\n\n\n/**\n * Use SQLite as fallback database.\n *\n * @private\n */\nLockit.prototype.database = function() {\n  this.config.db = {\n    url: 'sqlite://',\n    name: ':memory:',\n    collection: 'my_user_table'\n  };\n  var message = 'no db config found. Using SQLite.';\n  console.log(chalk.bgBlack.green('lockit'), message);\n};\n\n\n\n/**\n * Stub emails.\n *\n * @private\n */\nLockit.prototype.email = function() {\n  var message = 'no email config found. Check your database for tokens.';\n  console.log(chalk.bgBlack.green('lockit'), message);\n};\n\n\n\n/**\n * Send all routes to Single Page Application entry point.\n *\n * @private\n */\nLockit.prototype.rest = function() {\n  var that = this;\n  var parentDir = path.dirname(module.parent.filename);\n\n  var routes = [\n    this.config.signup.route,\n    this.config.signup.route + '/resend-verification',\n    this.config.signup.route + '/:token',\n    this.config.login.route,\n    this.config.login.logoutRoute,\n    this.config.forgotPassword.route,\n    this.config.forgotPassword.route + '/:token',\n    this.config.deleteAccount.route\n  ];\n\n  routes.forEach(function(route) {\n    that.router.get(route, function(req, res) {\n      // check if user would like to render a file or use static html\n      if (that.config.rest.useViewEngine) {\n        res.render(that.config.rest.index, {\n          basedir: req.app.get('views')\n        });\n      } else {\n        res.sendfile(path.join(parentDir, that.config.rest.index));\n      }\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lockit/node_modules/lockit/config.default.js":"\nexports.appname = 'lockit - Test App';\nexports.url = 'http://localhost:3000';\n\n// email settings\nexports.emailType = 'nodemailer-stub-transport';\nexports.emailSettings = {\n  service: 'none',\n  auth: {\n    user: 'none',\n    pass: 'none'\n  }\n};\n\n// lock account\nexports.failedLoginsWarning = 3;\nexports.failedLoginAttempts = 5;\nexports.accountLockedTime = '20 minutes';\n\n// send html to client (false) or only json (true)\nexports.rest = false;\n\n// signup settings\nexports.signup = {\n  route: '/signup',\n  tokenExpiration: '1 day',\n  views: {\n    signup: '',         // input fields 'username', 'email' and 'password' | local variable 'error' | POST /'signup.route'\n    linkExpired: '',    // message link has expired | input field 'email' | POST /'signup.route'/resend-verification\n    verified: '',       // message email is now verified and maybe link to /'login.route'\n    signedUp: '',       // message email has been sent => check your inbox\n    resend: ''          // input field 'email' | local variable 'error' | POST /'signup.route'/resend-verification\n  },\n  handleResponse: true  // let lockit handle the response after signup success\n};\n\n// login settings\nexports.login = {\n  route: '/login',\n  logoutRoute: '/logout',\n  views: {\n    login: '',          // input fields 'login' and 'password' | POST /'login.route' | local variable 'error'\n    loggedOut: ''       // message that user logged out\n  },\n  handleResponse: true  // let lockit handle the response after login/logout success\n};\n\n// forgot password settings\nexports.forgotPassword = {\n  route: '/forgot-password',\n  tokenExpiration: '1 day',\n  views: {\n    forgotPassword: '', // input field 'email' | POST /'forgotPassword.route' | local variable 'error'\n    newPassword: '',    // input field 'password' | POST /'forgotPassword.route'/#{token} | local variable 'error'\n    changedPassword: '',// message that password has been changed successfully\n    linkExpired: '',    // message that link has expired and maybe link to /'forgotPassword.route'\n    sentEmail: ''       // message that email with token has been sent\n  }\n};\n\n// delete account settings\nexports.deleteAccount = {\n  route: '/delete-account',\n  views: {\n    remove: '',         // input fields 'username', 'phrase', 'password' | POST /'deleteAccount.route' | local variable 'error'\n    removed: ''         // message that account has been deleted\n  },\n  handleResponse: true  // let lockit handle the response after delete account success\n};\n\n// simple white email template\nexports.emailTemplate = 'lockit-template-blank';\n\n// from email address\nexports.emailFrom = 'welcome@lock.it';\n\n// email signup template\nexports.emailSignup = {\n  subject: 'Welcome to <%- appname %>',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'Welcome to <%- appname %>.',\n    '<p><%- link %> to complete your registration.</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n\n// signup process -> email already taken\nexports.emailSignupTaken = {\n  subject: 'Email already registered',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'you or someone else tried to sign up for <%- appname %>.',\n    '<p>Your email is already registered and you cannot sign up twice.',\n    ' If you haven\\'t tried to sign up, you can safely ignore this email. Everything is fine!</p>',\n    '<p>The <%- appname %> Team</p>'\n  ].join('')\n};\n\n// signup process -> resend email with verification link\nexports.emailResendVerification = {\n  subject: 'Complete your registration',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'here is the link again. <%- link %> to complete your registration.',\n    '<p>The <%- appname %> Team</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n\n// forgot password\nexports.emailForgotPassword = {\n  subject: 'Reset your password',\n  text: [\n    '<h2>Hey <%- username %></h2>',\n    '<%- link %> to reset your password.',\n    '<p>The <%- appname %> Team</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n"}